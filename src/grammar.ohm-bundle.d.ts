// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  ActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface BoringLangActionDict<T> extends ActionDict<T> {
  space?: (this: NonterminalNode, arg0: TerminalNode) => T;
  Program_statements?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  Program_endStatement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Program_wrappedInEmptyLines?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  Program?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Statement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  VariableDeclaration?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  Expression?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  identifier?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  Block?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: IterationNode, arg3: TerminalNode) => T;
  BlockStatement_statements?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  BlockStatement_endStatement?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  BlockStatement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionDeclaration?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: TerminalNode, arg4: IterationNode, arg5: NonterminalNode, arg6: TerminalNode) => T;
  FunctionBody_statements?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  FunctionBody_endStatement?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  FunctionBody?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionParameters_parametr?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FunctionParameters_endParametr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionParameters_noParametr?: (this: NonterminalNode, arg0: TerminalNode) => T;
  FunctionParameters?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionParametr?: (this: NonterminalNode, arg0: IterationNode) => T;
  FunctionCall?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  FunctionArguments_arguments?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  FunctionArguments_endArgument?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionArguments_noArgument?: (this: NonterminalNode, arg0: TerminalNode) => T;
  FunctionArguments?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  FunctionArgument?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  valueAssignmentOperator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  typeAssignmentOperator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  newLine?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface BoringLangSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: BoringLangActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: BoringLangActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: BoringLangActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: BoringLangActionDict<T>): this;
}

export interface BoringLangGrammar extends Grammar {
  createSemantics(): BoringLangSemantics;
  extendSemantics(superSemantics: BoringLangSemantics): BoringLangSemantics;
}

declare const grammar: BoringLangGrammar;
export default grammar;

