BoringLang {
  space := " " | "\t"

  Program = | Program newLine+ Program                                          -- statements
            | Statement                                                         -- endStatement
            | newLine* Program newLine*                                         -- wrappedInEmptyLines

  Statement = | VariableDeclaration
              | Expression

  valueAssignmentOperator = "="
  typeAssignmentOperator = ":"
  newLine = "\n"

  VariableDeclaration = | identifier ValueAssignment                            -- onlyValue
                        | identifier TypeAssignment ValueAssignment             -- valueAndType
                        | identifier TypeAssignment                             -- onlyType

  ValueAssignment = valueAssignmentOperator Expression
  TypeAssignment = typeAssignmentOperator TypeExpression 

  Expression = | FunctionCall
               | FunctionDeclaration<FunctionParameter, Expression>
               | numberExpression
               | stringExpression
               | identifier
               | Block

  TypeExpression = | FunctionDeclaration<TypeExpression, TypeExpression>
                   | stringType
                   | numberType
                   | identifier

  identifier = (letter | "!")+
  numberExpression = digit+
  stringExpression = "\"" ("\u{0021}" | "\u{0023}".."\u{00FF}")* "\""
  stringType = "string"
  numberType = "number"

  Block = "{" newLine* BlockStatement* "}"
  BlockStatement = | Statement newLine+ BlockStatement                          -- statements
                   | Expression newLine*                                        -- endStatement

  FunctionDeclaration<TParameter, TReturnExpression> = "(" FunctionParameters<TParameter> ")" TReturnExpression
  FunctionParameters<TParameter> = | TParameter "," FunctionParameters<TParameter>                -- parametr
                                   | TParameter                                       -- endParametr
                                   | ""                                                     -- noParametr
  FunctionParameter = letter+


  FunctionCall = | FunctionCall"(" FunctionArguments ")"                        -- chainedCall
                 | identifier"(" FunctionArguments ")"                          -- firstCall
  FunctionArguments = | FunctionArgument "," FunctionArguments                  -- arguments
                      | FunctionArgument                                        -- endArgument
                      | ""                                                      -- noArgument
  FunctionArgument = Expression 

}