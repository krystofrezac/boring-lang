BoringLang {
  space := " " | "\t" | newLine

  Program = | Program #(newLine) Program                                          -- statements
            | Statement                                                         -- endStatement

  Statement = | VariableDeclaration
              | Expression

  newLine = "\n"
  valueAssignmentOperator = "="
  typeAssignmentOperator = ":"

  VariableDeclaration = | identifier ValueAssignment                            -- onlyValue
                        | identifier TypeAssignment ValueAssignment             -- valueAndType
                        | identifier TypeAssignment                             -- onlyType

  ValueAssignment = valueAssignmentOperator Expression
  TypeAssignment = typeAssignmentOperator TypeExpression 

  Expression = | FunctionCall
               | FunctionDeclaration<FunctionParameter, Expression>
               | numberExpression
               | stringExpression
               | identifier
               | Block

  TypeExpression = | FunctionDeclaration<TypeExpression, TypeExpression>
                   | stringType
                   | numberType
                   | identifier

  identifier = (letter | "!")+
  numberExpression = digit+
  stringExpression = "\"" ("\u{0021}" | "\u{0023}".."\u{00FF}")* "\""
  stringType = "string"
  numberType = "number"
  compilerHook  = "@"letter+

  Block = "{"  BlockStatement* "}"
  BlockStatement = | Statement #(newLine) BlockStatement                          -- statements
                   | Expression                                        -- endStatement

  FunctionDeclaration<TParameter, TReturnExpression> = "(" FunctionParameters<TParameter> ")" TReturnExpression
  FunctionParameters<TParameter> = ListOf<TParameter, ",">
  FunctionParameter = letter+


  FunctionCall = | FunctionCall"(" FunctionArguments ")"                        -- chainedCall
                 | identifier "(" FunctionArguments ")"                        -- firstCall
                 | compilerHook "(" FunctionArguments ")"                      -- firstCallCompilerHook
  FunctionArguments = ListOf<FunctionArgument, ",">
  FunctionArgument = Expression 

}